#!/usr/bin/env python3
import sys
from os import chdir, environ, listdir, mkdir, path
from subprocess import run


class VenvManager:
    ignored_dirs = ['.git', 'ignore', 'venv']
    require = ['pip', 'setuptools', 'wheel']

    def __init__(self, name):
        self.name = name
        self.project_dir = path.expanduser(path.join('~', 'development', name))
        self.venv_dir = path.join(self.project_dir, 'venv')
        self.dep_env_file = path.join(self.project_dir, '../deployment', '.env')
        self.env_file = path.join(self.project_dir, '.env')
        self.activate = path.join(self.venv_dir, 'bin', 'activate')

    def get_src_dir(self):
        tmp = self.project_dir
        for adir in ['backend', 'src']:
            new = path.join(tmp, adir)
            if path.exists(new):
                tmp = new
        dirs = [x for x in listdir(tmp) if path.isdir(path.join(tmp, x))
                and x not in self.ignored_dirs and '.egg-info' not in x]
        if len(dirs) == 1:
            tmp = path.join(tmp, dirs[0])
        return tmp

    def mkvenv(self):
        if not path.exists(self.project_dir):
            mkdir(self.project_dir)
        pip = path.join(self.venv_dir, 'bin', 'pip')
        if not path.exists(pip):
            import venv
            venv.create(self.venv_dir, with_pip=True)  # pylint: disable=no-member
            run([pip, 'install', '--upgrade'] + self.require)
            with open(self.activate, 'a') as fyl:
                fyl.write('set -o allexport && . "%s" && . "%s" && set +o allexport' % (
                    self.dep_env_file, self.env_file))
        if not path.exists(self.env_file):
            with open(self.env_file, 'w') as fyl:
                fyl.writelines([x + '\n' for x in [
                    'VIRTUAL_ENV_NAME=%s' % self.name,
                    'COMPOSE_PROJECT_NAME="${VIRTUAL_ENV_NAME}"',
                    'PROJECT_ROOT="%s"' % self.project_dir,
                    'PROJECT_VENV="%s"' % self.venv_dir,
                    # 'PYTHONPATH="`pwd`:$XDG_DATA_HOME/vim/plug/ViMango/plugin:$PYTHONPATH"',
                ]])
        self.workon()

    def workon(self):
        if not path.exists(self.project_dir):
            sys.exit('No project exists at {}.'.format(self.project_dir))
        if not path.exists(self.activate):
            venv_path = path.join(self.project_dir, self.venv_dir)
            msg = 'No venv exists in {}. Make one? [y/N]: '.format(venv_path)
            mkvenv = input(msg)
            if mkvenv.lower() == 'y':
                return self.mkvenv()
            sys.exit('No venv to activate.'.format(self.name))
        chdir(self.get_src_dir())
        shell = environ['SHELL']
        run([shell, '-c', 'source {}; {} -i'.format(self.activate, shell)])


if __name__ == '__main__':
    cmnd = sys.argv[1:2][0] if sys.argv[1:2] else None
    proj = sys.argv[2:3][0] if sys.argv[2:3] else None
    if not cmnd:
        sys.exit('No action specified')
    if not proj:
        sys.exit('No project specified')
    target = getattr(VenvManager(proj), cmnd, None)
    if target is None:
        sys.exit('Invalid action: {}'.format(cmnd))
    target()


# vim: filetype=python
